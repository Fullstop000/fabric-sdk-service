// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coin_transaction.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	coin_transaction.proto

It has these top-level messages:
	QueryRequest
	WriteRequest
	CoinSDKServiceResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoinSDKServiceResponse_Status int32

const (
	CoinSDKServiceResponse_success CoinSDKServiceResponse_Status = 0
	CoinSDKServiceResponse_other   CoinSDKServiceResponse_Status = 5
	CoinSDKServiceResponse_error   CoinSDKServiceResponse_Status = 9
)

var CoinSDKServiceResponse_Status_name = map[int32]string{
	0: "success",
	5: "other",
	9: "error",
}
var CoinSDKServiceResponse_Status_value = map[string]int32{
	"success": 0,
	"other":   5,
	"error":   9,
}

func (x CoinSDKServiceResponse_Status) String() string {
	return proto.EnumName(CoinSDKServiceResponse_Status_name, int32(x))
}
func (CoinSDKServiceResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

// The query request
type QueryRequest struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString" json:"query_string,omitempty"`
	OrgID       string `protobuf:"bytes,2,opt,name=orgID" json:"orgID,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueryRequest) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *QueryRequest) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

// The write request
type WriteRequest struct {
	// use json to simplified the RPC service level
	JsonStr string `protobuf:"bytes,1,opt,name=jsonStr" json:"jsonStr,omitempty"`
	OrgID   string `protobuf:"bytes,2,opt,name=orgID" json:"orgID,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WriteRequest) GetJsonStr() string {
	if m != nil {
		return m.JsonStr
	}
	return ""
}

func (m *WriteRequest) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

// The service response
type CoinSDKServiceResponse struct {
	Message string                        `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Status  CoinSDKServiceResponse_Status `protobuf:"varint,2,opt,name=status,enum=main.CoinSDKServiceResponse_Status" json:"status,omitempty"`
	// if QueryRequest the payload is a json str encoded by go json lib
	Payload string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (m *CoinSDKServiceResponse) Reset()                    { *m = CoinSDKServiceResponse{} }
func (m *CoinSDKServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*CoinSDKServiceResponse) ProtoMessage()               {}
func (*CoinSDKServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CoinSDKServiceResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CoinSDKServiceResponse) GetStatus() CoinSDKServiceResponse_Status {
	if m != nil {
		return m.Status
	}
	return CoinSDKServiceResponse_success
}

func (m *CoinSDKServiceResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "main.QueryRequest")
	proto.RegisterType((*WriteRequest)(nil), "main.WriteRequest")
	proto.RegisterType((*CoinSDKServiceResponse)(nil), "main.CoinSDKServiceResponse")
	proto.RegisterEnum("main.CoinSDKServiceResponse_Status", CoinSDKServiceResponse_Status_name, CoinSDKServiceResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoinTransaction service

type CoinTransactionClient interface {
	// Create a coin transaction record in fabric network
	CreateTransaction(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error)
	// Query the transaction info from fabric
	QueryTransaction(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error)
	// Create a account for certain user
	CreateAccount(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error)
}

type coinTransactionClient struct {
	cc *grpc.ClientConn
}

func NewCoinTransactionClient(cc *grpc.ClientConn) CoinTransactionClient {
	return &coinTransactionClient{cc}
}

func (c *coinTransactionClient) CreateTransaction(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error) {
	out := new(CoinSDKServiceResponse)
	err := grpc.Invoke(ctx, "/main.CoinTransaction/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinTransactionClient) QueryTransaction(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error) {
	out := new(CoinSDKServiceResponse)
	err := grpc.Invoke(ctx, "/main.CoinTransaction/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinTransactionClient) CreateAccount(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*CoinSDKServiceResponse, error) {
	out := new(CoinSDKServiceResponse)
	err := grpc.Invoke(ctx, "/main.CoinTransaction/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoinTransaction service

type CoinTransactionServer interface {
	// Create a coin transaction record in fabric network
	CreateTransaction(context.Context, *WriteRequest) (*CoinSDKServiceResponse, error)
	// Query the transaction info from fabric
	QueryTransaction(context.Context, *QueryRequest) (*CoinSDKServiceResponse, error)
	// Create a account for certain user
	CreateAccount(context.Context, *WriteRequest) (*CoinSDKServiceResponse, error)
}

func RegisterCoinTransactionServer(s *grpc.Server, srv CoinTransactionServer) {
	s.RegisterService(&_CoinTransaction_serviceDesc, srv)
}

func _CoinTransaction_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinTransactionServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CoinTransaction/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinTransactionServer).CreateTransaction(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinTransaction_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinTransactionServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CoinTransaction/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinTransactionServer).QueryTransaction(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinTransaction_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinTransactionServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CoinTransaction/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinTransactionServer).CreateAccount(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoinTransaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.CoinTransaction",
	HandlerType: (*CoinTransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _CoinTransaction_CreateTransaction_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _CoinTransaction_QueryTransaction_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _CoinTransaction_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin_transaction.proto",
}

func init() { proto.RegisterFile("coin_transaction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x9b, 0xf6, 0x6f, 0x4b, 0x6f, 0xfb, 0x6b, 0x1c, 0x4a, 0x09, 0xe2, 0x42, 0xe3, 0x46,
	0x10, 0x02, 0xd6, 0xa5, 0x20, 0xd8, 0x16, 0x8b, 0xb8, 0x69, 0x93, 0x82, 0xcb, 0x32, 0x8e, 0x97,
	0x34, 0x62, 0x67, 0xd2, 0x99, 0x89, 0xd0, 0xd7, 0xf1, 0x21, 0x7c, 0x25, 0x5f, 0x43, 0x66, 0x92,
	0x62, 0x28, 0x55, 0xc1, 0x5d, 0xce, 0xc9, 0xcc, 0x97, 0x93, 0x7b, 0x0f, 0xf4, 0x98, 0x48, 0xf8,
	0x5c, 0x4b, 0xca, 0x15, 0x65, 0x3a, 0x11, 0x3c, 0x48, 0xa5, 0xd0, 0x82, 0xfc, 0x5b, 0xd2, 0x84,
	0xfb, 0x63, 0xe8, 0x4c, 0x33, 0x94, 0xeb, 0x10, 0x57, 0x19, 0x2a, 0x4d, 0x4e, 0xa0, 0xb3, 0x32,
	0x7a, 0xae, 0xb4, 0x4c, 0x78, 0xec, 0x39, 0xc7, 0xce, 0x59, 0x2b, 0x6c, 0x5b, 0x2f, 0xb2, 0x16,
	0xe9, 0x42, 0x5d, 0xc8, 0xf8, 0x6e, 0xe4, 0x55, 0xed, 0xbb, 0x5c, 0xf8, 0xd7, 0xd0, 0x79, 0x90,
	0x89, 0xc6, 0x0d, 0xc8, 0x83, 0xe6, 0xb3, 0x12, 0x3c, 0xd2, 0xb2, 0x60, 0x6c, 0xe4, 0x37, 0xf7,
	0xdf, 0x1d, 0xe8, 0x0d, 0x45, 0xc2, 0xa3, 0xd1, 0x7d, 0x84, 0xf2, 0x35, 0x61, 0x18, 0xa2, 0x4a,
	0x05, 0x57, 0x68, 0x50, 0x4b, 0x54, 0x8a, 0xc6, 0xb8, 0x41, 0x15, 0x92, 0x5c, 0x41, 0x43, 0x69,
	0xaa, 0x33, 0x65, 0x59, 0x7b, 0xfd, 0xd3, 0xc0, 0xfc, 0x54, 0xb0, 0x9b, 0x13, 0x44, 0xf6, 0x68,
	0x58, 0x5c, 0x31, 0xd8, 0x94, 0xae, 0x5f, 0x04, 0x7d, 0xf2, 0x6a, 0x39, 0xb6, 0x90, 0xfe, 0x39,
	0x34, 0xf2, 0xb3, 0xa4, 0x0d, 0x4d, 0x95, 0x31, 0x86, 0x4a, 0xb9, 0x15, 0xd2, 0x82, 0xba, 0xd0,
	0x0b, 0x94, 0x6e, 0xdd, 0x3c, 0xa2, 0x94, 0x42, 0xba, 0xad, 0xfe, 0x87, 0x03, 0xfb, 0xe6, 0x83,
	0xb3, 0xaf, 0x09, 0x93, 0x31, 0x1c, 0x0c, 0x25, 0x52, 0x8d, 0x65, 0x93, 0xe4, 0xe1, 0xca, 0x53,
	0x3a, 0x3c, 0xfa, 0x29, 0xb0, 0x5f, 0x21, 0xb7, 0xe0, 0xda, 0xf5, 0xec, 0xe0, 0x94, 0xd7, 0xf6,
	0x2b, 0x67, 0x08, 0xff, 0xf3, 0x40, 0x37, 0x8c, 0x89, 0x8c, 0xeb, 0xbf, 0x84, 0x19, 0x4c, 0xe1,
	0x82, 0x89, 0x65, 0xb0, 0xce, 0x78, 0xba, 0xa0, 0x5c, 0x07, 0xa6, 0x58, 0xe5, 0x5e, 0xc5, 0x32,
	0x65, 0xdb, 0xe6, 0xa0, 0xbb, 0x35, 0x9b, 0x89, 0x29, 0xdf, 0xc4, 0x79, 0xab, 0xd6, 0xc2, 0xd9,
	0xf8, 0xb1, 0x61, 0xbb, 0x78, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0xba, 0xe6, 0xb8, 0x13, 0xa5,
	0x02, 0x00, 0x00,
}
